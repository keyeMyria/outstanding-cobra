buildscript {
    ext {
        kotlinVersion = '1.0.3'
        springBootVersion = '1.4.1.RELEASE'
        outstandingCobraVersion = '0.0.1-SNAPSHOT'

        if (System.getenv("CIRCLE_BUILD_NUM") != null) {
            outstandingCobraVersion = outstandingCobraVersion + '-' + System.getenv("CIRCLE_BUILD_NUM")
        }
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'idea'

war {
    baseName = 'outstanding-cobra-server'
    version = outstandingCobraVersion
}

idea {
    module {
        sourceDirs += file('src/main/generated')
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile 'com.querydsl:querydsl-jpa:4.1.4'
    compile 'com.querydsl:querydsl-apt:4.1.4:jpa'
    compile 'com.auth0:auth0-spring-security-api:0.3.2'
    compile 'com.auth0:auth0:0.4.0'
    compile('io.springfox:springfox-swagger2:2.6.0')
    compile('io.springfox:springfox-swagger-ui:2.6.0')
    compile('io.springfox:springfox-staticdocs:2.6.0')
    testCompile('com.google.truth:truth:0.30')

    // Spring Initializr
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    runtime('com.h2database:h2')
    runtime('mysql:mysql-connector-java')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
